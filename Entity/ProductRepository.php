<?php

namespace Sulu\Bundle\ProductBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Sulu\Bundle\ProductBundle\Product\ProductRepositoryInterface;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository implements ProductRepositoryInterface
{
    /**
     * {@inheritDoc}
     */
    public function findById($id)
    {
        try {
            $qb = $this->createQueryBuilder('product')
                ->andWhere('product.id = :productId')
                ->setParameter('productId', $id);

            return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    public function findByIdAndLocale($id, $locale)
    {
        try {
            $qb = $this->getProductQuery($locale);
            $qb->andWhere('product.id = :productId');
            $qb->setParameter('productId', $id);

            return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * Returns all products in the given locale
     * @param string $locale The locale of the product to load
     * @return ProductInterface[]
     */
    public function findAllByLocale($locale)
    {
        try {
            return $this->getProductQuery($locale)->getQuery()->getResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    public function findByLocaleAndFilter($locale, array $filter)
    {
        try {
            $qb = $this->getProductQuery($locale);

            foreach ($filter as $key => $value) {
                switch ($key) {
                    case 'status':
                        $qb->andWhere('status.id = :' . $key);
                        $qb->setParameter($key, $value);
                        break;

                    case 'type':
                        $qb->andWhere('type.id = :' . $key);
                        $qb->setParameter($key, $value);
                        break;
                }
            }

            $query = $qb->getQuery();
            return $query->getResult();
        } catch (NoResultException $ex) {
            return null;
        }
    }

    /**
     * Returns the query for products
     * @param string $locale The locale to load
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getProductQuery($locale)
    {
        $qb = $this->createQueryBuilder('product')
            ->leftJoin('product.translations', 'translations')
            ->leftJoin('product.status', 'status')
            ->leftJoin('status.translations', 'statusTranslations')
            ->leftJoin('product.type', 'type')
            ->leftJoin('type.translations', 'typeTranslations')
            ->andWhere('translations.locale = :locale')
            ->andWhere('statusTranslations.locale = :locale')
            ->andWhere('typeTranslations.locale = :locale')
            ->setParameter('locale', $locale);

        return $qb;
    }
}
